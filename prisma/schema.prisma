// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// App Items Schema

model Events {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  duration    Int       @default(10) // in minutes
  numOfSeats  Int       @default(1) // 0 for unlimited
  thumbnail   String?
  dateFrom    DateTime  @default(now())
  dateTo      DateTime  @default(now())
  Booking     Booking[]
}

model Booking {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  event      Events    @relation(fields: [eventId], references: [id])
  eventId    String    @db.ObjectId
  eventTitle String
  user       User      @relation(fields: [userEmail], references: [email])
  userEmail  String
  userName   String
  date       DateTime  @default(now())
  confirmed  Boolean   @default(false)
  paid       Boolean   @default(false)
  paidAmount Float?
  notes      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

// User Management Schema
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  telephone     String?
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
